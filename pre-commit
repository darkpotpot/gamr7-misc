#! /usr/bin/python
import sys
import os
import git
import pylint
import pylint.lint as linter

def main(args):
   repo = git.Repo(os.getcwd())
   files = repo.git.execute(['git', 'diff', repo.active_branch, '--name-only'])
   files = files.split("\n")
   files = filter(lambda f : f and f.endswith("py"), files)
   files = filter(os.path.exists, files)
   try:
       if not files : return ""
       else         : return linter.Run(files)
   except SystemExit, exc:
       if not exc.code:
           sys.stderr.write("paver::lint - No problems found.\n")
       elif exc.code & 32:
           # usage error (internal error in this code)
           sys.stderr.write("paver::lint - Usage error, bad arguments %r?!\n" % (args,))
           raise
       else:
           bits = {
               1: "fatal",
               2: "error",
               4: "warning",
               8: "refactor",
               16: "convention",
           }
           sys.stderr.write("paver::lint - Some %s message(s) issued.\n" % (
               ", ".join([text for bit, text in bits.items() if exc.code & bit])
           ))
           if exc.code & 3:
               sys.stderr.write("paver::lint - Exiting due to fatal / error message.\n")
               raise
#    out =  os.system('pylint %s ' %files[0])
#    print out, type(out)
#    return out


sys.exit(main(sys.argv[1:]))

